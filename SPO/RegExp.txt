
program -> func_init_expr* + main_expr

func_init_expr -> DEFINE_KW DATA_TYPE FUNCTION L_BR args_init_expr R_BR L_FIG lang return_expr? R_FIG
main_expr -> MAIN_KW L_BR R_BR L_FIG lang R_FIG

lang -> (assign_expr|while_expr|if_expr|func_expr)*

return_expr -> RETURN_KW value_expr END_ST
args_init_expr -> VAR? | VAR (COMMA VAR)*
args_expr -> value_expr? | value_expr (COMMA value_expr)*

while_expr -> WHILE_KW L_BR logic_expr R_BR lang
if_expr -> IF_KW L_BR logic_expr R_BR lang (else expr)?
else_expr -> ELSE_KW lang
assign_expr -> VAR ASSIGN_OP value_expr END_ST

logic_expr -> compare_expr (LOG_OP compare_expr)* | L_BR logic_expr R_BR
comp_expr -> value_expr (COMP_OP value_expr)?

value_expr -> value (OP value)* | L_BR value_expr R_BR
function_expr -> FUNCTION L_BR args_expr R_BR
value -> VAR | DIGIT | function_expr

DATA_TYPE -> void | int

FUNCTION -> [a-zA-Z_]+[a-zA-Z0-9_]*
VAR -> [a-zA-Z_]+[a-zA-Z0-9_]*
DIGIT -> 0|([1-9][0-9]*)

ASSIGN_OP -> =

OP -> +|-|*|/
UNARY_OP -> -

LOG_OP -> && | ||
UNARY_LOG_OP -> !
COMP_OP -> >|<|==|>=|<=|!=

L_BR -> (
R_BR -> )

L_FIG -> {
R_FIG -> }

END_ST -> ;
COMMA -> ,

IF_KW -> if
ELSE_KW -> else
WHILE_KW -> while

DEFINE_KW -> define
MAIN_KW -> main