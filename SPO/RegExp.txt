
lang -> (assign_expr|while_expr|if_expr|list_expr)+

list_expr -> VAR POINT list_func
while_expr -> WHILE_KW L_BR logic_expr R_BR lang
if_expr -> IF_KW L_BR logic_expr R_BR lang (else expr)?
else_expr -> ELSE_KW lang
assign_expr -> VAR ASSIGN_OP value_expr END_ST

list_func -> (NO_ARG_LIST_FUNC |ONE_ARG_LIST_FUNC | TWO_ARG_LIST_FUNC) END_ST

NO_ARG_LIST_FUNC -> (CREATE_LIST | POP_BACK | POP_FRONT | GET_SIZE) L_BR R_BR
ONE_ARG_LIST_FUNC -> (PUSH_BACK | PUSH_FRONT | GET | REMOVE) L_BR value_expr R_BR
TWO_ARG_LIST_FUNC -> INSERT L_BR value_expr COMMA value_expr R_BR

logic_expr -> compare_expr (LOG_OP compare_expr)* | L_BR logic_expr R_BR
comp_expr -> value_expr (COMP_OP value_expr)?

value_expr -> value (OP value)* | L_BR value_expr R_BR | VAR POINT INSERT L_BR value_expr R_BR
value -> VAR | DIGIT

VAR -> [a-zA-Z_]+[a-zA-Z0-9]*
DIGIT -> 0|([1-9][0-9]*)

ASSIGN_OP -> =

OP -> +|-|*|/
UNARY_OP -> -

LOG_OP -> && | ||
UNARY_LOG_OP -> !
COMP_OP -> >|<|==|>=|<=|!=

L_BR -> (
R_BR -> )

L_FIG -> {
R_FIG -> }

END_ST -> ;
POINT -> .
COMMA -> ,

IF_KW -> if
ELSE_KW -> else
WHILE_KW -> while